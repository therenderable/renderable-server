version: '3.5'

secrets:
  api_access_key:
    file: secrets/api_access_key
  registry_username:
    file: secrets/registry_username
  registry_password:
    file: secrets/registry_password
  registry_encrypted_password:
    file: secrets/registry_encrypted_password
  registry_secret_key:
    file: secrets/registry_secret_key
  console_encrypted_password:
    file: secrets/console_encrypted_password
  cache_password:
    file: secrets/cache_password
  database_username:
    file: secrets/database_username
  database_password:
    file: secrets/database_password
  storage_access_key:
    file: secrets/storage_access_key
  storage_secret_key:
    file: secrets/storage_secret_key
  container_queue_username:
    file: secrets/container_queue_username
  container_queue_password:
    file: secrets/container_queue_password
  task_queue_username:
    file: secrets/task_queue_username
  task_queue_password:
    file: secrets/task_queue_password
  resource_queue_username:
    file: secrets/resource_queue_username
  resource_queue_password:
    file: secrets/resource_queue_password
  state_queue_username:
    file: secrets/state_queue_username
  state_queue_password:
    file: secrets/state_queue_password

services:
  server:
    build: server/
    ports:
      - '${SERVER_PORT}:${SERVER_PORT}'
      - '${CLUSTER_MANAGER_PORT}:${CLUSTER_MANAGER_PORT}'
      - '${CLUSTER_NODE_PORT}:${CLUSTER_NODE_PORT}'
      - '${CLUSTER_NODE_PORT}:${CLUSTER_NODE_PORT}/udp'
      - '${CLUSTER_NETWORK_PORT}:${CLUSTER_NETWORK_PORT}/udp'
      - '${TASK_QUEUE_PORT}:${TASK_QUEUE_PORT}'
    environment:
      - SERVER_PORT
      - API_DOMAIN
      - API_HOSTNAME
      - API_PORT
      - CLUSTER_HOSTNAME
      - CLUSTER_MANAGER_PORT
      - CLUSTER_NODE_PORT
      - CLUSTER_NETWORK_PORT
      - REGISTRY_DOMAIN
      - REGISTRY_HOSTNAME
      - REGISTRY_PORT
      - CONSOLE_DOMAIN
      - CONSOLE_HOSTNAME
      - CONSOLE_PORT
      - STORAGE_DOMAIN
      - STORAGE_HOSTNAME
      - STORAGE_PORT
      - TASK_QUEUE_HOSTNAME
      - TASK_QUEUE_PORT
    depends_on:
      - api
    restart: unless-stopped
  api:
    build: api/
    hostname: ${API_HOSTNAME}
    expose:
      - '${API_PORT}'
    environment:
      - API_DOMAIN
      - API_VERSION
      - API_PRODUCTION
      - API_WORKERS
      - API_HEARTBEAT_PERIOD
      - API_MAXIMUM_TASK_RETRIES
      - API_PORT
      - CLUSTER_DOMAIN_IP
      - CLUSTER_HOSTNAME
      - CLUSTER_PORT
      - CLUSTER_MANAGER_PORT
      - CLUSTER_CERTIFICATE_PATH=/etc/ssl/certs/cluster/
      - REGISTRY_DOMAIN
      - DATABASE_HOSTNAME
      - DATABASE_PORT
      - STORAGE_DOMAIN
      - STORAGE_HOSTNAME
      - STORAGE_PORT
      - CONTAINER_QUEUE_HOSTNAME
      - CONTAINER_QUEUE_PORT
      - TASK_QUEUE_DOMAIN
      - TASK_QUEUE_HOSTNAME
      - TASK_QUEUE_PORT
      - RESOURCE_QUEUE_HOSTNAME
      - RESOURCE_QUEUE_PORT
      - STATE_QUEUE_HOSTNAME
      - STATE_QUEUE_PORT
    secrets:
      - api_access_key
      - registry_username
      - registry_password
      - database_username
      - database_password
      - storage_access_key
      - storage_secret_key
      - container_queue_username
      - container_queue_password
      - task_queue_username
      - task_queue_password
      - resource_queue_username
      - resource_queue_password
      - state_queue_username
      - state_queue_password
    volumes:
      - cluster_certificate:/etc/ssl/certs/cluster/
    depends_on:
      - cluster
      - database
      - storage
      - container_queue
      - task_queue
      - resource_queue
      - state_queue
    restart: unless-stopped
  container_worker:
    build: container-worker/
    environment:
      - CLUSTER_COOLDOWN_PERIOD
      - CLUSTER_HOSTNAME
      - CLUSTER_PORT
      - CLUSTER_CERTIFICATE_PATH=/etc/ssl/certs/cluster/
      - CONTAINER_QUEUE_HOSTNAME
      - CONTAINER_QUEUE_PORT
    secrets:
      - container_queue_username
      - container_queue_password
    volumes:
      - cluster_certificate:/etc/ssl/certs/cluster/
    depends_on:
      - cluster
      - container_queue
    restart: unless-stopped
  resource_worker:
    build: resource-worker/
    environment:
      - API_PRODUCTION
      - DATABASE_HOSTNAME
      - DATABASE_PORT
      - STORAGE_DOMAIN
      - STORAGE_HOSTNAME
      - STORAGE_PORT
      - RESOURCE_QUEUE_HOSTNAME
      - RESOURCE_QUEUE_PORT
      - STATE_QUEUE_HOSTNAME
      - STATE_QUEUE_PORT
    secrets:
      - database_username
      - database_password
      - storage_access_key
      - storage_secret_key
      - resource_queue_username
      - resource_queue_password
      - state_queue_username
      - state_queue_password
    depends_on:
      - database
      - storage
      - resource_queue
      - state_queue
    restart: unless-stopped
  cluster:
    image: docker:19.03.12-dind
    hostname: ${CLUSTER_HOSTNAME}
    expose:
      - '${CLUSTER_PORT}'
      - '${CLUSTER_MANAGER_PORT}'
      - '${CLUSTER_NODE_PORT}'
      - '${CLUSTER_NODE_PORT}/udp'
      - '${CLUSTER_NETWORK_PORT}/udp'
    privileged: true
    volumes:
      - cluster:/var/lib/docker/
      - cluster_certificate:/certs/client/
    command: '--insecure-registry=${CLUSTER_INSECURE_REGISTRY}'
    depends_on:
      - registry
    restart: unless-stopped
  registry:
    image: registry:2.7
    hostname: ${REGISTRY_HOSTNAME}
    expose:
      - '${REGISTRY_PORT}'
    environment:
      - REGISTRY_HTTP_ADDR=:${REGISTRY_PORT}
      - REGISTRY_HTTP_SECRET_FILE=/run/secrets/registry_secret_key
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM='Renderable Registry'
      - REGISTRY_AUTH_HTPASSWD_PATH=/run/secrets/registry_encrypted_password
      - REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR=redis
      - REGISTRY_REDIS_ADDR=${CACHE_HOSTNAME}:${CACHE_PORT}
      - REGISTRY_REDIS_PASSWORD_FILE=/run/secrets/cache_password
    secrets:
      - registry_encrypted_password
      - registry_secret_key
      - cache_password
    volumes:
      - registry:/var/lib/registry/
    command: '/bin/sh -c \
      "REGISTRY_HTTP_SECRET=\"$$(cat $$REGISTRY_HTTP_SECRET_FILE)\"
      REGISTRY_REDIS_PASSWORD=\"$$(cat $$REGISTRY_REDIS_PASSWORD_FILE)\"
      registry serve /etc/docker/registry/config.yml"'
    depends_on:
      - cache
    restart: unless-stopped
  console:
    image: portainer/portainer:1.24.1-alpine
    hostname: ${CONSOLE_HOSTNAME}
    expose:
      - '${CONSOLE_PORT}'
    environment:
      - PORTAINER_PASSWORD_FILE=/run/secrets/console_encrypted_password
    secrets:
      - console_encrypted_password
    volumes:
      - console:/data/
      - cluster_certificate:/certs/
    entrypoint: ''
    command: '/bin/sh -c \
      "portainer -H tcp://${CLUSTER_HOSTNAME}:${CLUSTER_PORT} --tlsverify --admin-password \"$$(cat $$PORTAINER_PASSWORD_FILE)\""'
    depends_on:
      - cluster
    restart: unless-stopped
  cache:
    image: redis:6.0.5
    hostname: ${CACHE_HOSTNAME}
    expose:
      - '${CACHE_PORT}'
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/cache_password
    secrets:
      - cache_password
    volumes:
      - cache:/data/
    command: '/bin/bash -c \
      "redis-server --port ${CACHE_PORT} --requirepass \"$$(cat $$REDIS_PASSWORD_FILE)\""'
    restart: unless-stopped
  database:
    image: mongo:4.2.6
    hostname: ${DATABASE_HOSTNAME}
    expose:
      - '${DATABASE_PORT}'
    environment:
      - MONGO_INITDB_DATABASE=db
      - MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/database_username
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/database_password
    secrets:
      - database_username
      - database_password
    volumes:
      - database:/data/db/
    command: 'mongod --port ${DATABASE_PORT}'
    restart: unless-stopped
  storage:
    image: minio/minio:RELEASE.2020-05-16T01-33-21Z
    hostname: ${STORAGE_HOSTNAME}
    expose:
      - '${STORAGE_PORT}'
    environment:
      - MINIO_ACCESS_KEY_FILE=storage_access_key
      - MINIO_SECRET_KEY_FILE=storage_secret_key
      - MINIO_BROWSER=on
    secrets:
      - storage_access_key
      - storage_secret_key
    volumes:
      - storage:/data/
    command: 'minio server --address :${STORAGE_PORT} /data/'
    restart: unless-stopped
  container_queue:
    image: rabbitmq:3.8-management
    hostname: ${CONTAINER_QUEUE_HOSTNAME}
    expose:
      - '${CONTAINER_QUEUE_PORT}'
    environment:
      - RABBITMQ_NODE_PORT=${CONTAINER_QUEUE_PORT}
      - RABBITMQ_DEFAULT_USER_FILE=/run/secrets/container_queue_username
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/container_queue_password
    secrets:
      - container_queue_username
      - container_queue_password
    volumes:
      - container_queue:/data/
    restart: unless-stopped
  task_queue:
    image: rabbitmq:3.8-management
    hostname: ${TASK_QUEUE_HOSTNAME}
    expose:
      - '${TASK_QUEUE_PORT}'
    environment:
      - RABBITMQ_NODE_PORT=${TASK_QUEUE_PORT}
      - RABBITMQ_DEFAULT_USER_FILE=/run/secrets/task_queue_username
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/task_queue_password
    secrets:
      - task_queue_username
      - task_queue_password
    volumes:
      - task_queue:/data/
    restart: unless-stopped
  resource_queue:
    image: rabbitmq:3.8-management
    hostname: ${RESOURCE_QUEUE_HOSTNAME}
    expose:
      - '${RESOURCE_QUEUE_PORT}'
    environment:
      - RABBITMQ_NODE_PORT=${RESOURCE_QUEUE_PORT}
      - RABBITMQ_DEFAULT_USER_FILE=/run/secrets/resource_queue_username
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/resource_queue_password
    secrets:
      - resource_queue_username
      - resource_queue_password
    volumes:
      - resource_queue:/data/
    restart: unless-stopped
  state_queue:
    image: rabbitmq:3.8-management
    hostname: ${STATE_QUEUE_HOSTNAME}
    expose:
      - '${STATE_QUEUE_PORT}'
    environment:
      - RABBITMQ_NODE_PORT=${STATE_QUEUE_PORT}
      - RABBITMQ_DEFAULT_USER_FILE=/run/secrets/state_queue_username
      - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/state_queue_password
    secrets:
      - state_queue_username
      - state_queue_password
    volumes:
      - state_queue:/data/
    restart: unless-stopped

volumes:
  cluster:
  cluster_certificate:
  registry:
  console:
  cache:
  database:
  storage:
  container_queue:
  task_queue:
  resource_queue:
  state_queue:
